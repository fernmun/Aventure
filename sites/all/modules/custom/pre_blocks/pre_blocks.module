<?php
/**
 * @file
 * Create the site Blocks.
 */

/**
 * Implements hook_menu().
 */
function pre_blocks_menu() {
  $items = array();
  $items['admin/config/pre-event'] = array(
    'title' => 'Pre event',
    'description' => 'Settings for the pre event site.',
    'position' => 'left',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/pre-event/main-block'] = array(
    'title' => t('Configuration for Main block'),
    'description' => t('Allows you to customize the main block.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pre_main_block_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'pre_blocks.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function pre_blocks_block_info() {
  $blocks = array(
    'pre_main_block' => array(
      'info' => t('Block with countdown and list'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'pre_countdown_text_block' => array(
      'info' => t('Countdown Text'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pre_blocks_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'pre_main_block':
      global $base_url;
      global $base_path;

      $block['content'] = array();
      $block['content']['#attached']['library'][] = array('pre_libraries', 'countdown');
      $node = menu_get_object();
      $node_wrapper = entity_metadata_wrapper('node', $node);
      
      switch ($node_wrapper->type->value()) {
        case 'paquete':
          $date = $node_wrapper->field_paquete_fecha->value();
          $date_formats = get_time_to_go($date['value']);
          $list_summary = t('Our next group outing will be on @date, missing ...',
          array('@date' => $date_formats['date_format']));

          break;
        case 'evento':
          $date = $node_wrapper->field_evento_date_from->value();
          $datetime = new DateTime($date['value']);
          $date = array();
          $date['value'] = $datetime->getTimestamp();
          $date_formats = get_time_to_go($date['value']);
          $list_summary = t('Left...',
          array('@date' => $date_formats['date_format']));
          break;
        default:
          $date = '9999999999';
          break;
      }
      

      $result = preg_replace_callback("/\[\[(.+?)\]\]/", 'replace_span', $list_summary);
      $list_summary = explode("\n", $result);
      $block['content']['list-summary-container'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(drupal_html_class('pre-list-summary')),
        ),
      );
      foreach ($list_summary as $key_cont => $value_cont) {
        $block['content']['list-summary-container']['item-container'][$key_cont] = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(drupal_html_class('argumentation-list-item-container')),
            'id' => drupal_html_class('item-') . $key_cont,
          ),
        );
        $block['content']['list-summary-container']['item-container'][$key_cont]['item'] = array(
          '#type' => 'html_tag',
          '#tag' => 'span',
          '#value' => $value_cont,
        );
      };
      // Countdown.
      $event_time = $date['value'];
      $block['content']['countdown-super-container'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(drupal_html_class('countdown-super-container'))
        ),
      );
      $block['content']['countdown-super-container']['countdown-container'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'id' => drupal_html_class('countdown-container'),
        ),
      );
      $block['content']['#attached']['js'][] = array(
        'data' => array(
          'pre_blocks' => array('configuration' => array(
            'module_path' => drupal_get_path('module', 'pre_blocks') . '/images',
            'path' => drupal_get_path('module', 'pre_blocks'),
            'event_time' => $event_time,
            'site_path' => $base_url . '/',
          )),
        ),
        'type' => 'setting',
      );
      $block['content']['#attached']['js'][] = drupal_get_path('module', 'pre_blocks') . '/js/site-countdown.js';
      $block['content']['#attached']['js'][] = drupal_get_path('module', 'pre_blocks') . '/js/main-block.js';
      break;
    case 'pre_countdown_text_block':
      $block['content'] = array();
      $block['subject'] = t('Countdown Text');
      $block['content']['countdown-text-container'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(drupal_html_class('countdown-text-container')),
        ),
      );

      $block['content']['countdown-text-container']['days'] = array(
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#value' => t('Days'),
      );
      $block['content']['countdown-text-container']['hours'] = array(
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#value' => t('Hours'),
      );
      $block['content']['countdown-text-container']['minutes'] = array(
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#value' => t('Minutes'),
      );
      break;
  }
  return $block;
}

/**
 * Replace [[]] with <span>.
 */
function replace_span($matches) {
  $return_span = '<span>' . $matches[1] . '</span>';
  return $return_span;
}

/**
 * Implements hook_node_view()
 */
function pre_blocks_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    drupal_set_title(preg_replace_callback("/\[\[(.+?)\]\]/", 'replace_span', $node->title), PASS_THROUGH);
  }
}
